# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sCrypt.Inc
# This file is distributed under the same license as the sCrypt-IDE-docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt-IDE-docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-02 16:14+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../testting.rst:5
msgid "单元测试"
msgstr "单元测试"

#: ../../testting.rst:7
msgid ""
"我们通过编写 **javascript/typescript** 来测试合约。我们推荐使用 `mocha "
"<https://mochajs.org/>`_ 测试框架来进行合约的测试，当然您可以使用其它测试框架。 ``package.json`` "
"文件的脚本部分中应该存在一个名为 ``single-test`` 的脚本。**sCrypt IDE** 用它来运行单个文件测试。通常它看起来像 "
"\"single-test\": \"mocha\"，但您可以自定义它。"
msgstr ""
"我们通过编写 **javascript/typescript** 来测试合约。我们推荐使用 `mocha "
"<https://mochajs.org/>`_ 测试框架来进行合约的测试，当然您可以使用其它测试框架。 ``package.json`` "
"文件的脚本部分中应该存在一个名为 ``single-test`` 的脚本。**sCrypt IDE** 用它来运行单个文件测试。通常它看起来像 "
"\"single-test\": \"mocha\"，但您可以自定义它。"

#: ../../testting.rst:10
msgid ""
"**sCrypt IDE** 支持在代码编辑器/资源管理器上下文菜单中运行单元测试文件。开始运行后，**sCrypt IDE** 会为您自动打开 "
"vscode 底部面板，并显示 **输出** 视图， 测试报告将输出到 **输出** 视图。"
msgstr ""
"**sCrypt IDE** 支持在代码编辑器/资源管理器上下文菜单中运行单元测试文件。开始运行后，**sCrypt IDE** 会为您自动打开 "
"vscode 底部面板，并显示 **输出** 视图， 测试报告将输出到 **输出** 视图。"

#: ../../testting.rst:16
msgid ""
"测试文件必须以 ``.scrypttest.js`` 或 ``.scrypttest.ts`` 为后缀，否则菜单中不会出现“Run sCrypt "
"Test”选项。"
msgstr ""
"测试文件必须以 ``.scrypttest.js`` 或 ``.scrypttest.ts`` 为后缀，否则菜单中不会出现“Run sCrypt "
"Test”选项。"

#: ../../testting.rst:23
msgid "测试合约时，您可以使用加载编译输出的 **合约描述文件** （也是就 * *_desc.json* 文件）比如："
msgstr "测试合约时，您可以使用加载编译输出的 **合约描述文件** （也是就 * *_desc.json* 文件）比如："

#: ../../testting.rst:29
msgid ""
"也可以使用 **scryptlib** 导出 ``compileContract`` 或者 ``compile`` 函数来编译合约，用于集成和测试以 "
"**sCrypt** 语言编写的比特币智能合约的 Javascript/TypeScript SDK"
msgstr ""
"也可以使用 **scryptlib** 导出 ``compileContract`` 或者 ``compile`` 函数来编译合约，用于集成和测试以 "
"**sCrypt** 语言编写的比特币智能合约的 Javascript/TypeScript SDK"

#: ../../testting.rst:36
msgid "创建合约的实例"
msgstr "创建合约的实例"

#: ../../testting.rst:42
msgid "执行合约的 ``public`` 方法来验证合约的正确性。"
msgstr "执行合约的 ``public`` 方法来验证合约的正确性。"

#: ../../testting.rst:50
msgid ""
"您可以参阅 `scryptlib <https://github.com/sCrypt-Inc/scryptlib>`_ 的文档以进步了解如何使用它。"
msgstr ""
"您可以参阅 `scryptlib <https://github.com/sCrypt-Inc/scryptlib>`_ 的文档以进步了解如何使用它。"

#: ../../testting.rst:56
msgid "如何快速调试 sCrypt 单元测试错误"
msgstr "如何快速调试 sCrypt 单元测试错误"

#: ../../testting.rst:58
msgid ""
"**sCrypt IDE** "
"允许您在单元测试失败的地方启动调试器，这将帮助开发人员极大地提高调试合约问题的效率。如果单元测试失败，则错误消息中还有另外两行信息："
msgstr ""
"**sCrypt IDE** "
"允许您在单元测试失败的地方启动调试器，这将帮助开发人员极大地提高调试合约问题的效率。如果单元测试失败，则错误消息中还有另外两行信息："

#: ../../testting.rst:64
msgid ""
"**Go to Source** : 它显示了单元测试具体在 **sCrypt** 合约代码中哪一行失败，以及最后执行的脚本操作码。**CRTL + "
"单击** 将直接跳转到发生错误行；"
msgstr ""
"**Go to Source** : 它显示了单元测试具体在 **sCrypt** 合约代码中哪一行失败，以及最后执行的脚本操作码。**CRTL + "
"单击** 将直接跳转到发生错误行；"

#: ../../testting.rst:66
msgid ""
"**Launch Debugger** : **CRTL + 单击** "
"链接将根据测试中的参数直接启动调试器会话。调试器将在错误即将发生之前暂停，以便检查导致故障的原因。利用这个功能可以极大提升 debug 的效率。"
msgstr ""
"**Launch Debugger** : **CRTL + 单击** "
"链接将根据测试中的参数直接启动调试器会话。调试器将在错误即将发生之前暂停，以便检查导致故障的原因。利用这个功能可以极大提升 debug 的效率。"

#: ../../testting.rst:71
msgid "Launch Debugger 命令"
msgstr "Launch Debugger 命令"

#: ../../testting.rst:73
msgid ""
"通常情况下，您使用右键菜单来运行单元测试，这样您可以从 **输出** 中单击测试报告中的链接来打开调试器， "
"但是某些情况下，您可能是在外部环境运行测试，比如终端， 这种情况您将无法通过单击测试报告中的链接来打开调试器，这个时候，您可以使用 **Launch "
"Debugger** 命令，将 ``scryptlaunch:///{file}`` 粘贴到命令的输入弹出框中，并按 **Enter** 来启动调试器。"
msgstr ""
"通常情况下，您使用右键菜单来运行单元测试，这样您可以从 **输出** 中单击测试报告中的链接来打开调试器， "
"但是某些情况下，您可能是在外部环境运行测试，比如终端， 这种情况您将无法通过单击测试报告中的链接来打开调试器，这个时候，您可以使用 **Launch "
"Debugger** 命令，将 ``scryptlaunch:///{file}`` 粘贴到命令的输入弹出框中，并按 **Enter** 来启动调试器。"

#: ../../testting.rst:79
msgid "即使即将调试的合约不在当前项目中，也可以启动调试器"
msgstr "即使即将调试的合约不在当前项目中，也可以启动调试器"
