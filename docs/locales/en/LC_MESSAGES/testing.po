# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sCrypt.Inc
# This file is distributed under the same license as the sCrypt-IDE-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Xiaohui Liu <x.liu@scrypt.io>, 2021
# qtom zheng <zhfnjust@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt-IDE-docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 00:21+0800\n"
"PO-Revision-Date: 2021-06-02 09:22+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2021\n"
"Language-Team: English (https://www.transifex.com/scrypt-1/teams/121283/en/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../testing.rst:5 7bacab9422d4455b91ea5455c7fadcd3
msgid "单元测试"
msgstr "Testing"

#: ../../testing.rst:7 f030dbf5306142cfa6268cec8a67d953
msgid "我们通过编写 **Javascript/Typescript** 来测试合约。`样板项目`_ 中有很多合约的测试用例。"
msgstr ""
"We test the contract by writing **Javascript/Typescript**. There are many "
"contract test cases in `Boilerplate`_."

#: ../../testing.rst:9 f7a6144b1adf4b809f9ea26ca2ecf43b
msgid "首先，在工程根目录下运行 ``npm init`` 来创建一个 **npm** 项目。接下来安装依赖："
msgstr ""
"First, run ``npm init`` in the project root directory to create an **npm** "
"project. Next install dependencies:"

#: ../../testing.rst:11 4a5e0c8a2cc8463e8d58b5870d2e2b12
msgid "安装 **scryptlib**"
msgstr "Install **scryptlib**"

#: ../../testing.rst:13 b7d2040286a74d54bc2db7467c1af21d
msgid "``npm i scryptlib``"
msgstr "``npm i scryptlib``"

#: ../../testing.rst:17 c97103534ae54f61bd1a48ff24c97ed1
msgid ""
"`scryptlib`_ 是官方提供的用于集成以 **sCrypt** 语言编写的比特币智能合约的 Javascript/TypeScript SDK。"
msgstr ""
"`scryptlib`_ is the official Javascript/TypeScript SDK for integrating "
"Bitcoin smart contracts written in **sCrypt**."

#: ../../testing.rst:19 8b53bcd914164ebda25905017c48f764
msgid "安装 **mocha** 测试框架"
msgstr "Install **mocha** test framework"

#: ../../testing.rst:21 a881e0d624c14f76a9fd6687051b5e9c
msgid "``npm i -D chai mocha``"
msgstr "``npm i -D chai mocha``"

#: ../../testing.rst:25 63e77b1c42fc45f48ba8f45fcd1ff1d5
msgid "我们推荐使用 `mocha`_ 测试框架来进行合约的测试，当然您可以使用其它测试框架。"
msgstr ""
"We recommend using the `mocha`_ testing framework for contract testing. Of "
"course you can also use other testing frameworks."

#: ../../testing.rst:27 fd7e0947b9e04b2d9cbe1e14cf84f4d1
msgid "在 ``package.json`` 中配置测试命令"
msgstr "Configure test commands in ``package.json``"

#: ../../testing.rst:29 8642a0c9d59448a7b3957c600c338c3d
msgid ""
"``package.json`` 文件的脚本部分中应该存在一个名为 ``single-test`` 的脚本。**IDE** "
"用它来运行单个文件测试。通常它看起来像 ``\"single-test\": \"mocha\"``，但您可以自定义它。"
msgstr ""
"There should be a script named ``single-test`` in the script section of the "
"``package.json`` file. **IDE** uses it to run single file tests. Usually it "
"looks like ``\"single-test\": \"mocha\"``, but you can customize it."

#: ../../testing.rst:55 9fedfab191a9446dbb18304cfce40aa3
msgid ""
"**IDE** 支持在代码编辑器/资源管理器上下文菜单中运行单元测试文件。开始运行后，**IDE** 会为你自动打开VS Code底部面板，并显示 "
"**输出** 视图， 测试报告将输出到 **输出** 面板。"
msgstr ""
"**IDE** supports running unit test files in the context menu of code "
"editor/resource manager. After starting to run, **IDE** will automatically "
"open the bottom panel of VS Code for you, and display the **Output** view. "
"The test report will be shown in the **Output** panel."

#: ../../testing.rst:61 c61e000933684030894dc58578a95b7f
msgid ""
"测试文件必须以 ``.scrypttest.js`` 或 ``.scrypttest.ts`` 为后缀，否则菜单中不会出现“Run sCrypt "
"Test”选项。"
msgstr ""
"The test file must be suffixed with ``.scrypttest.js`` or "
"``.scrypttest.ts``, otherwise the \"Run sCrypt Test\" option will not appear"
" in the menu."

#: ../../testing.rst:68 70aeb98cff8146a8adfdb9616597475e
msgid "测试合约时，您可以使用加载编译输出的 **合约描述文件** （也是就 ``_desc.json`` 文件）比如："
msgstr ""
"When testing a contract, you can use the **contract description file** (also"
" just the ``_desc.json`` file) that loads the compiled output, such as:"

#: ../../testing.rst:74 468c111c54b042c390faf44346260141
msgid "也可以使用 **scryptlib** 导出 ``compileContract`` 或者 ``compile`` 函数来编译合约。"
msgstr ""
"You can also use **scryptlib** to export the ``compileContract`` or "
"``compile`` function to compile the contract."

#: ../../testing.rst:81 1029469963e940968a5389789ed0224d
msgid "创建合约的实例"
msgstr "Create an instance of the contract"

#: ../../testing.rst:87 7a04a38b9948448f80d31df2d50339bf
msgid "执行合约的 *public* 函数来验证合约的正确性。"
msgstr ""
"Execute the *public* function of the contract to verify the correctness of "
"the contract."

#: ../../testing.rst:100 ae2db0b79c5b45558160925ccc6f9a93
msgid "启动调试器"
msgstr "Start the debugger"

#: ../../testing.rst:102 f7e31db7b6584965bba4595062c262b7
msgid ""
"**IDE** 允许在单元测试失败的地方启动调试器，这将帮助开发人员极大地提高调试合约问题的效率。如果单元测试失败，则错误消息中还有另外两行信息："
msgstr ""
"**IDE** allows the debugger to be started where the unit test fails, which "
"will help developers greatly improve the efficiency of debugging contract "
"issues. If the unit test fails, there are two additional lines of "
"information in the error message:"

#: ../../testing.rst:108 0005f62ed37346c988b5f0293ef6f315
msgid ""
"**Go to Source** : 它显示了单元测试具体在合约代码中哪一行失败，以及最后执行的脚本操作码。**CRTL + 单击** "
"将直接跳转到发生错误行；"
msgstr ""
"**Go to Source** : It shows the specific line in the contract code where the"
" unit test failed, and the script opcode that was executed last. **CRTL + "
"click** will jump directly to the line where the error occurred;"

#: ../../testing.rst:110 d1986b232440430ca5a3267b8abd3c2b
msgid ""
"**Launch Debugger** : **CRTL + 单击** "
"链接将根据测试中的参数直接启动调试器会话。调试器将在错误即将发生之前暂停，以便检查导致故障的原因。利用这个功能可以极大提升 debug 的效率。"
msgstr ""
"**Launch Debugger**: **CRTL + Click** the link will directly start the "
"debugger session based on the arguments in the test. The debugger will pause"
" just before the error occurs in order to check the cause of the failure. "
"Using this function can greatly improve the efficiency of debugging."

#: ../../testing.rst:116 661889ad850e4d368617ce0a48e558b5
msgid "Launch Debugger 命令"
msgstr "Launch Debugger Command"

#: ../../testing.rst:118 b88a338f19894146bd6d24cbe8f52fdc
msgid ""
"通常情况下，可使用右键菜单来运行单元测试，这样可以从 **输出** 中单击测试报告中的链接来打开调试器。 但是某些情况下，测试在外部环境运行，比如终端。"
" 这种情况您将无法通过单击测试报告中的链接来打开调试器。这个时候，可以使用 **Launch Debugger** 命令，将 "
"``scryptlaunch:///{file}`` 粘贴到命令的输入弹出框中，并按 **Enter** 来启动调试器。"
msgstr ""
"Normally, you can use the right-click menu to run the unit test, so you can "
"click the link in the test report from **Output** to open the debugger. But "
"in some cases, the test runs in an external environment, such as a terminal."
" In this case, you will not be able to open the debugger by clicking the "
"link in the test report. In this case, you can use the **Launch Debugger** "
"command: paste ``scryptlaunch:///{file}`` into the command input pop-up box,"
" and press **Enter** to start the debugger."

#: ../../testing.rst:124 de46ebd91e714d748648fdf96b9c3c81
msgid "即使即将调试的合约不在当前项目中，也可以启动调试器"
msgstr ""
"Even if the contract to be debugged is not in the current project, you can "
"start the debugger"
