# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sCrypt.Inc
# This file is distributed under the same license as the sCrypt-IDE-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt-IDE-docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-04 11:59+0800\n"
"PO-Revision-Date: 2021-06-02 09:22+0000\n"
"Last-Translator: qtom zheng <zhfnjust@gmail.com>, 2021\n"
"Language-Team: English (https://www.transifex.com/scrypt-1/teams/121283/en/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../testting.rst:5 d6b4a0b90c8647c5aba4f483f7846901
msgid "单元测试"
msgstr "Testting"

#: ../../testting.rst:7 c1f89afd832e43d9bb9cd637fc2519af
msgid "我们通过编写 **javascript/typescript** 来测试合约。`样板项目`_ 中有很多合约的测试用例。"
msgstr ""
"We test the contract by writing **javascript/typescript**. There are many "
"contract test cases in `Boilerplate`_."

#: ../../testting.rst:9 c1f89afd832e43d9bb9cd637fc2519af
msgid "首先，在工程根目录下运行 ``npm init`` 来创建一个 **npm** 项目。接下来安装依赖："
msgstr ""
"First, run ``npm init`` in the project root directory to create a **npm** "
"project. Next install dependencies:"

#: ../../testting.rst:11 f5f5a38ecafa458d9f7b56327ad43517
msgid "安装 **scryptlib**"
msgstr "Install **scryptlib**"

#: ../../testting.rst:13 0a3238bc854742669afc4a2976717a7f
msgid "``npm i scryptlib``"
msgstr "``npm i scryptlib``"

#: ../../testting.rst:17 c3f4eb89a9cf428796ce683b16420048
msgid ""
"`scryptlib`_ 是官方提供的用于集成以 **sCrypt** 语言编写的比特币智能合约的 Javascript/TypeScript SDK。"
msgstr ""
"`scryptlib`_ is the official Javascript/TypeScript SDK for integrating "
"Bitcoin smart contracts written in **sCrypt** language."

#: ../../testting.rst:19 fb1510d4c4f1474e8991d14541009c48
msgid "安装 **mocha** 测试框架"
msgstr "Install **mocha** test framework"

#: ../../testting.rst:21 3b82d681993948f2bee76832283a4b55
msgid "``npm i -D chai mocha``"
msgstr "``npm i -D chai mocha``"

#: ../../testting.rst:25 9a31231e07ba4747bd528f77f2bb06de
msgid "我们推荐使用 `mocha`_ 测试框架来进行合约的测试，当然您可以使用其它测试框架。"
msgstr ""
"We recommend using the `mocha`_ testing framework for contract testing, of "
"course you can use other testing frameworks."

#: ../../testting.rst:27 62d60293536f4acc84739e9e794b45b9
msgid "在 ``package.json`` 中配置测试命令"
msgstr "Configure test commands in ``package.json``"

#: ../../testting.rst:29 66b06d0457ac41da9e5561afdd1a537c
msgid ""
"``package.json`` 文件的脚本部分中应该存在一个名为 ``single-test`` 的脚本。**IDE** "
"用它来运行单个文件测试。通常它看起来像 \"single-test\": \"mocha\"，但您可以自定义它。"
msgstr ""
"There should be a script named ``single-test`` in the script section of the "
"``package.json`` file. **IDE** uses it to run single file tests. Usually it "
"looks like \"single-test\": \"mocha\", but you can customize it."

#: ../../testting.rst:55 4f6fa9183354419c8942462c07425e73
msgid ""
"**IDE** 支持在代码编辑器/资源管理器上下文菜单中运行单元测试文件。开始运行后，**IDE** 会为你自动打开 vscode 底部面板，并显示 "
"**输出** 视图， 测试报告将输出到 **输出** 面板。"
msgstr ""
"**IDE** supports running unit test files in the context menu of the code "
"editor/resource manager. After starting to run, the **IDE** will "
"automatically open the bottom panel of vscode for you, and display the "
"**Output** view, and the test report will be output to the **Output** panel."

#: ../../testting.rst:61 c5b4e76cb39c4a08b1d12b4ab4b8536b
msgid ""
"测试文件必须以 ``.scrypttest.js`` 或 ``.scrypttest.ts`` 为后缀，否则菜单中不会出现“Run sCrypt "
"Test”选项。"
msgstr ""
"The test file must be suffixed with ``.scrypttest.js`` or "
"``.scrypttest.ts``, otherwise the \"Run sCrypt Test\" option will not appear"
" in the menu."

#: ../../testting.rst:68 91c3fd6c26b44b5ab8a71d7ebe390ac2
msgid "测试合约时，您可以使用加载编译输出的 **合约描述文件** （也是就 * *_desc.json* 文件）比如："
msgstr ""
"When testing a contract, you can use the **contract description file** (also"
" the * *_desc.json* file) that loads the compiled output, for example:"

#: ../../testting.rst:74 c49deb67afef4dbeada6b2d59c25af26
msgid ""
"也可以使用 **scryptlib** 导出 ``compileContract`` 或者 ``compile`` 函数来编译合约，用于集成和测试以 "
"**sCrypt** 语言编写的比特币智能合约的 Javascript/TypeScript SDK"
msgstr ""
"You can also use **scryptlib** to export the ``compileContract`` or "
"``compile`` function to compile the contract, which is used to integrate and"
" test the Javascript/TypeScript SDK of the Bitcoin smart contract written in"
" the **sCrypt** language"

#: ../../testting.rst:81 5439fc14889b4bf096f6d0f2a9a15179
msgid "创建合约的实例"
msgstr "Create an instance of the contract"

#: ../../testting.rst:87 1563c65359e04572a61d21c5e6ba27d9
msgid "执行合约的 *public* 函数来验证合约的正确性。"
msgstr ""
"Execute the *public* function of the contract to verify the correctness of "
"the contract."

#: ../../testting.rst:100 f30796999f564824837032b8d6a14447
msgid "如何快速调试 sCrypt 单元测试错误"
msgstr "How to quickly debug sCrypt unit test errors"

#: ../../testting.rst:102 a086ef1a515e442eac72e27a6db0c626
msgid ""
"**IDE** 允许您在单元测试失败的地方启动调试器，这将帮助开发人员极大地提高调试合约问题的效率。如果单元测试失败，则错误消息中还有另外两行信息："
msgstr ""
"**IDE** allows you to start the debugger where the unit test fails, which "
"will help developers greatly improve the efficiency of debugging contract "
"issues. If the unit test fails, there are two other lines of information in "
"the error message:"

#: ../../testting.rst:108 4726b618770544568966453eecffedff
msgid ""
"**Go to Source** : 它显示了单元测试具体在 **sCrypt** 合约代码中哪一行失败，以及最后执行的脚本操作码。**CRTL + "
"单击** 将直接跳转到发生错误行；"
msgstr ""
"**Go to Source**: It shows the specific line in the **sCrypt** contract code"
" where the unit test failed, and the script opcode executed last. **CRTL + "
"Click** will jump directly to the line where the error occurred;"

#: ../../testting.rst:110 aafd3d6d4a5546ad95c25cb58fad27b8
msgid ""
"**Launch Debugger** : **CRTL + 单击** "
"链接将根据测试中的参数直接启动调试器会话。调试器将在错误即将发生之前暂停，以便检查导致故障的原因。利用这个功能可以极大提升 debug 的效率。"
msgstr ""
"**Launch Debugger**: **CRTL + Click** The link will directly start the "
"debugger session based on the parameters in the test. The debugger will "
"pause just before the error occurs in order to check the cause of the "
"failure. Using this function can greatly improve the efficiency of "
"debugging."

#: ../../testting.rst:115 8da8c488816e4af4ad444d6830b0108c
msgid "Launch Debugger 命令"
msgstr "Launch Debugger command"

#: ../../testting.rst:117 c336900b0f1f435fa16c17c6f6e5fc81
msgid ""
"通常情况下，您使用右键菜单来运行单元测试，这样您可以从 **输出** 中单击测试报告中的链接来打开调试器， "
"但是某些情况下，您可能是在外部环境运行测试，比如终端， 这种情况您将无法通过单击测试报告中的链接来打开调试器，这个时候，您可以使用 **Launch "
"Debugger** 命令，将 ``scryptlaunch:///{file}`` 粘贴到命令的输入弹出框中，并按 **Enter** 来启动调试器。"
msgstr ""
"Normally, you use the right-click menu to run the unit test, so you can "
"click the link in the test report from **Output** to open the debugger, but "
"in some cases, you may run the test in an external environment. For example,"
" in the terminal, in this case, you will not be able to open the debugger by"
" clicking the link in the test report. At this time, you can use the "
"**Launch Debugger** command to paste ``scryptlaunch:///{file}`` Go to the "
"command input pop-up box and press **Enter** to start the debugger."

#: ../../testting.rst:123 4db4e4066ed242d9a033a123eaeb7313
msgid "即使即将调试的合约不在当前项目中，也可以启动调试器"
msgstr ""
"Even if the contract to be debugged is not in the current project, you can "
"start the debugger"
