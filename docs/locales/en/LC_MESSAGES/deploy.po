# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sCrypt.Inc
# This file is distributed under the same license as the sCrypt-IDE-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@gmail.com>, 2021
# Xiaohui Liu <x.liu@scrypt.io>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt-IDE-docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-10 09:41+0800\n"
"PO-Revision-Date: 2021-06-02 09:22+0000\n"
"Last-Translator: Xiaohui Liu <x.liu@scrypt.io>, 2021\n"
"Language-Team: English (https://www.transifex.com/scrypt-1/teams/121283/en/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../deploy.rst:5 c6b43a74dd61402cbb174daa4c05f7e3
msgid "图形化界面部署调用合约"
msgstr "Deploy and call a contract in GUI"

#: ../../deploy.rst:8 7c7dbf9fafc040fc9e7748fa9d984535
msgid ""
"在完成合约的编写与测试之后，通常需要将合约部署到测试网中，以验证合约是否正确，相关交易能否被网络接受。 **IDE** 提供一个通用的 UI "
"交互界面，只需简单的填写相关参数，就能一键部署合约，点击按钮就能调用合约的 *public* 函数，无须编写一行代码。"
msgstr ""
"After finishing writing and testing of a contract, it is recommended to "
"deploy it to testnet to verify the contract is correct and the enclosing "
"transaction can be accepted by the network. **IDE** provides a GUI, where "
"you can deploy a contract with just one click after filling in the relevant "
"inputs. You can call the *public* function of the deployed contract with "
"just another click, without writing a single line of code."

#: ../../deploy.rst:14 14742559dda14e6bbf8d933d31c56a03
msgid "主要 UI 交换控件包括："
msgstr "The GUI mainly includes:"

#: ../../deploy.rst:16 cf407cbd33254e4d92435bd23dc51e45
msgid "左边的 **sCrypt Deploy** 按钮, 点击可以从其它侧边视图切换到部署视图"
msgstr ""
"**SCrypt Deploy** button on the left, click to switch from other side view "
"to deployment view"

#: ../../deploy.rst:17 7a2e5f1784004060bbac05808ca3a8c4
msgid "本地合约窗口，加载当前工作区 ``out`` 目录下所有已经编译的 :ref:`合约描述文件 <contractdescription>`"
msgstr ""
"Local contract window, load all compiled files in the ``out`` directory of "
"the current workspace :ref:`Contract Description File <contractdescription>`"

#: ../../deploy.rst:18 c5e87c9e7edd448dbcc8d7de84729a14
msgid "已经部署成功的合约实例窗口"
msgstr ""
"The contract instance window, containing all contracts that have been "
"successfully deployed"

#: ../../deploy.rst:19 0e7a3860ce2c4b73882d0412fe8b452a
msgid ""
"部署合约配置视图。在该视图下填写部署合约的相关参数，包括：构造函数参数，合约锁定的 *satoshis* 余额，以及 `有状态合约`_ 的初始状态。"
msgstr ""
"Deployment contract configuration view. Fill in the relevant inputs of the "
"deployment contract in this view, including: constructor arguments, "
"*satoshis* balance amount locked in the contract, and the initial state of a"
" `stateful contract`_."

#: ../../deploy.rst:23 abb2803bf94943f4a25375f2cfa5ac0b
msgid "目前只支持测试网"
msgstr "Currently only testnet is supported."

#: ../../deploy.rst:26 d78d335272cf4d138cac4856b33f6e3e
msgid "设置私钥"
msgstr "Set private key"

#: ../../deploy.rst:28 ac2766a620f640d8afa1c5ae83e81822
msgid ""
"部署合约到测试网需要先 :ref:`设置私钥 <settings_privatekey>`。如果检测到没有设置私钥，**IDE** "
"会自打开设置界面，提示设置测试网私钥。"
msgstr ""
"To deploy a contract to the testnet, you need to :ref:`set the private key "
"<settings_privatekey>`. If it is not set yet, **IDE** will open the setting "
"interface automatically and prompt you to set it"

#: ../../deploy.rst:33 cc3d813365154bf6a2712060b89fced1
msgid "编译合约"
msgstr "Compile a Contract"

#: ../../deploy.rst:35 c6044888e36e4c9cba7b50052f08259c
msgid ""
"部署合约到测试网需要先 :ref:`编译合约 <compiling>`。编译完合约后， 本地合约窗口（COMPILED "
"CONTRACTS）会自动刷新出刚刚编译的合约。点击窗口中的合约，打开部署合约配置视图。 也可以通过在代码编辑器上右键单击 **Deploy** "
"菜单，将会自动以 :ref:`调试编译 <debug_compiling>` 合约，并打开部署合约配置视图。"
msgstr ""
"To deploy a contract, you need to :ref:`compile it first <compiling>`. After"
" the contract is compiled, the local contract window (COMPILED CONTRACTS) "
"will automatically refresh and detect the contract just compiled. Click the "
"contract in the window to open the contract deployment configuration view. "
"You can also right-click the **Deploy** menu in the code editor. It will "
"automatically compile the contract with :ref:`debug build type "
"<debug_compiling>` and open the contract deployment configuration view."

#: ../../deploy.rst:42 b8606cc797c14943a26997938a117c71
msgid "部署合约"
msgstr "Deploy a Contract"

#: ../../deploy.rst:44 20da69616b9e4d4a8f8fecba7112c881
msgid ""
"打开部署合约配置视图后， 填写合约构造函数的各个参数，以及合约锁定 *satoshis* 余额，如果是状态合约，还需要填写初始的状态，然后点击 "
"**Deploy** 按钮，在 **输出面板** 可以看到部署成功的提示, 在左边的合约实例窗口 (DEPLOYED CONTRACTS) "
"中会出现对应的实例，点击合约实例上的 View Tx 按钮，则可打开浏览器查看对应的交易。"
msgstr ""
"After opening the contract deployment configuration view, fill in the "
"various parameters of the contract constructor and *satoshis* amount the "
"contract locks. If it is a stateful contract, you also need to fill in the "
"initial state. Then click the **Deploy** button, in the **output panel** you"
" can see the prompt of successful deployment. The corresponding instance "
"will appear in the contract instance window (DEPLOYED CONTRACTS) on the "
"left. Click the View Tx button on the contract instance to open a block "
"explorer to view the corresponding transaction."

#: ../../deploy.rst:51 3e012d2a5d5d4ec4b3dd2ad85e6ffd97
msgid "调用合约"
msgstr "Call a Contract"

#: ../../deploy.rst:54 fa7b81de7ae248afb6a6d88292803409
msgid "普通合约"
msgstr "Ordinary Contract"

#: ../../deploy.rst:56 8c2833c6c0b94b9bbc684ed36182c4a1
msgid ""
"点击合约实例上的构造函数，则可查看构造函数调用时的实参。点击 *public* 函数，右边则会出现该函数的调用视图。 "
"和部署合约的过程一样，只需给函数对应的参数赋值，点击 **Call** 按钮，就能调用该函数了。 如果调用成功，可以看到对应的交易， "
"失败则会打印出对应的错误。"
msgstr ""
"Click the constructor on a contract instance, you can view the actual "
"arguments of the constructor. Click a *public* function, and the call view "
"of the function will appear on the right. Just like deploying a contract, "
"you only need to assign values to the corresponding parameters of the "
"function and click the **Call** button to call the function. If the call is "
"successful, you can see the corresponding transaction. If it fails, the "
"corresponding error will be printed."

#: ../../deploy.rst:63 3673668833d5491193ec57d40b3e5774
msgid "有状态合约"
msgstr "Stateful Contract"

#: ../../deploy.rst:65 fefef128d8d14b9c9fd1657a343300ea
msgid "在合约调用视图可以看到合约的当前信息，如合约锁定余额、当前执行阶段、内部状态等。要调用当前合约的函数，还需要根据情况完成以下几个步骤："
msgstr ""
"In the contract call view, you can see the current information of the "
"contract, such as the locked amount and current state. To call the function "
"of the current contract, you need to complete the following steps:"

#: ../../deploy.rst:68 5e7cdf85e11144b9a060dc3ed9a193fc
msgid "填写调用函数所需的实参。"
msgstr "Fill in the arguments required to call the function."

#: ../../deploy.rst:69 1f9bc76115324ef1a7ca7a6dd0cd9127
msgid "添加交易输出，对于有状态合约，一般会限制合约的输出脚本，所以需要手动管理所有交易输出。目前支持的输出类型有三种："
msgstr ""
"Add transaction outputs. For a stateful contract, its output script is "
"generally restricted, so all transaction outputs need to be manually "
"configured. There are three types of output currently supported:"

#: ../../deploy.rst:72 89a959aed99248f0827cba79aa48ee49
msgid "输出类型"
msgstr "Output Type"

#: ../../deploy.rst:72 617b166ac5204afd93c4f61622d5da48
msgid "参数"
msgstr "Parameter"

#: ../../deploy.rst:74 232979e9dd39430697131ffadbd57b84
msgid "状态合约输出"
msgstr "State contract output"

#: ../../deploy.rst:74 c2397017b8b241ea8d7682321727ce83
msgid "``State`` : 合约状态的序列化值(hex格式)， ``Amount`` : 合约中锁定的余额(satoshis)"
msgstr ""
"``State``: serialized value of the contract state (in hex format), "
"``Amount``: the amount locked in the contract (satoshis)"

#: ../../deploy.rst:75 b7047e4835da4f4891b9982a8fb3b567
msgid "P2PKH输出"
msgstr "P2PKH output"

#: ../../deploy.rst:75 8f653cfa71a94a43adbc7c3d8aaa3521
msgid "``Address``: 收款人地址， ``Amount`` : 合约中锁定的余额"
msgstr ""
"``Address``: address of the payee, ``Amount``: the amount locked in the "
"contract"

#: ../../deploy.rst:76 b9590cc25423428e923997b3d7f40cd1
msgid "OpReturn输出"
msgstr "OpReturn output"

#: ../../deploy.rst:76 51af2b67e5b9432c831562f387048b53
msgid "``OpReturn`` : op_return后数据部分，asm 格式， ``Amount`` : 合约中锁定的余额"
msgstr ""
"``OpReturn``: data after op_return, in asm format, ``Amount``: the amount "
"locked in the contract"

#: ../../deploy.rst:79 41adb84c90ec45d3848bf8ddb88860ac
msgid "设置交易相关参数"
msgstr "Set transaction-level parameters"

#: ../../deploy.rst:81 ba89c63af68e4c76b38b048d0e08b0e4
msgid "交易费用 ``Fee``： 根据已经添加的交易输出，以及合约的 *satoshis* 余额自动计算得到。"
msgstr ""
"Transaction fee ``Fee``: It is automatically calculated based on the "
"summarized transaction outputs and the *satoshis* amount of the contract."

#: ../../deploy.rst:83 18d09049c1334c5bbd1ca8df036a34e4
msgid ""
"交易签名类型 ``SighashType``： 默认用于计算交易原象 Preimage 的签名类型是 ALL，可根据合约使用交易签名类型来修改此值。"
msgstr ""
"Transaction signature type ``SighashType``: The default signature type used "
"to calculate the preimage of the transaction is ALL, and this value can be "
"modified according to the transaction signature type used in the contract."

#: ../../deploy.rst:85 ceea8e241b384b4bb68f20b41da82383
msgid "点击 Call 按钮调用合约"
msgstr "Click the Call button to call the contract"

#: ../../deploy.rst:87 bd9ecd0cc6204d2dba4c41654bc7118e
msgid ""
"所有设置均完成后点击 Call 按钮，会发送这个合约调用交易到测试网。交易发送成功后，可以看到顶部显示合约余额发生变化。 合约实例的 "
"**transactions** 子项中增加了一个交易，并且可通过右侧的 **View Tx** "
"按钮在区块链浏览器上进行查看。另外，选中该交易子项时，被调用函数下的参数列表中会显示出此次调用时传递的各个实参。"
msgstr ""
"After all settings are completed, click the ``Call`` button to send this "
"contract call transaction to testnet. After the transaction is sent "
"successfully, you can see that the contract balance displayed at the top is "
"updated. The transaction is added to the **transactions** sub-item of the "
"contract instance, and it can be viewed on the block explorer through the "
"**View Tx** button on the right. In addition, when the transaction sub-item "
"is selected, the arguments passed to the called function will be displayed."

#: ../../deploy.rst:93 13a3170c37ff4a8887dfb8d765cfedb6
msgid "重复调用"
msgstr "Repeated calls"

#: ../../deploy.rst:95 389cc29fc3e04d0ca77e9156bfe45eb6
msgid "针对有状态合约，可以重复上面的步骤继续调用其 *public* 函数并观察其状态变更，直到合约中的余额不足。"
msgstr ""
"For a stateful contract, you can repeat the above steps to continue calling "
"its *public* function and observe its state changes until the balance in the"
" contract is insufficient."

#: ../../deploy.rst:99 ec0b18a6e41d4fb49c0d6c3b6965b12d
msgid "目前暂不支持合并其它输入来调用合约"
msgstr "Currently, we do NOT support merging other inputs to call a contract."

#: ../../deploy.rst:102 da20ce892d86433585c46978dedcf8a3
msgid "调用失败"
msgstr "Call Failure"

#: ../../deploy.rst:104 1739537e6e3e464a9c7ba6a39aa321ba
msgid ""
"通常情况下，调用合约失败，将会在 **输出面板** 输出相应的信息，并生成 ``Launch Debugger`` 链接。 **CRTL + 单击** "
"链接将根据测试中的参数直接启动调试器会话。"
msgstr ""
"Normally, if a call to a contract fails, the corresponding information will "
"be shown in the **output panel**, and the ``Launch Debugger`` link will be "
"generated. **CRTL + Click** the link will directly launch the debugger "
"session based on the arguments in the test."

#: ../../deploy.rst:115 35120c12e9514cd39b414524c35b2114
msgid "参数输入格式"
msgstr "Argument Input Format"

#: ../../deploy.rst:117 36f07fcd334d4f3094f12cb8396a8679
msgid "部署合约和调用合约都需要在视图中输入正确的参数。参数输入格式参照下表："
msgstr ""
"Both deploying a contract and calling it requires correct parameters in the "
"view. Refer to the table below for the parameter input format:"

#: ../../deploy.rst:120 3fbb476b66c34b18b2459911a09b956a
msgid "参数类型"
msgstr "Parameter Type"

#: ../../deploy.rst:120 6abbd5c894f346ef83baeb527975d46b
msgid "输入格式说明"
msgstr "Input format description"

#: ../../deploy.rst:122 3e278e68372e4cc48f02984dc39f872c
msgid "bool"
msgstr "bool"

#: ../../deploy.rst:122 5014be746d284c25b1bebada4fccbc9c
msgid "``true`` 或者 ``false``"
msgstr "``true`` or ``false``"

#: ../../deploy.rst:123 f909da5bd7f64e83ac50e9d5ffc57658
msgid "int"
msgstr "int"

#: ../../deploy.rst:123 5eafda3f0ee240369fe4ea3d8aca5489
msgid "十进制数字或十六进制数字，例如: ``123`` 或者 ``0x0123``"
msgstr ""
"Decimal number or hexadecimal number, for example: ``123`` or ``0x0123``"

#: ../../deploy.rst:124 4aa01deaa5fd4ebfb8447fdcf4006c64
msgid "bytes"
msgstr "bytes"

#: ../../deploy.rst:124 eef0de40a7eb4c2994c2437f25241ef3
msgid ""
"十六进制字符串, 例如: "
"``036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f``"
msgstr ""
"Hexadecimal string, for example: "
"``036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f``"

#: ../../deploy.rst:125 7fe42ffd37ab41e89961cadefdf21310
msgid "PubKey"
msgstr "PubKey"

#: ../../deploy.rst:125 ../../deploy.rst:127 ../../deploy.rst:128
#: ../../deploy.rst:129 ../../deploy.rst:130 ../../deploy.rst:131
#: ../../deploy.rst:132 ../../deploy.rst:133 9e178f39808449cbae12b871762dd157
#: 611ec1a8c0c3431eb879d7e0e007a1e2 8d111da6c1fe474b9517a48759b7d63c
#: d9dd223cb0cd4c308c3e0ea876cd17c7 9969e0af46654c349a41c425acbeea3a
#: f9df596e03e44cc893a3dadfd35ad1d9 f72ee5b606fd4c1ead686b828f9c4b3a
#: 9208df1579344eafbce870947c49997a
msgid "十六进制字符串, 同 ``bytes``"
msgstr "Hexadecimal string, same as ``bytes``"

#: ../../deploy.rst:126 7bbedcd43db043ca8f971d21ef3129c6
msgid "PrivKey"
msgstr "PrivKey"

#: ../../deploy.rst:126 4dea75312e0b4a7793c7228ebb5d862a
msgid "同 ``int``"
msgstr "Same as ``int``"

#: ../../deploy.rst:127 cf0434c76b7640a3ba07e63974d61929
msgid "Sig"
msgstr "Sig"

#: ../../deploy.rst:128 30924ec410e84b76af4043a7cb8a40f2
msgid "Ripemd160"
msgstr "Ripemd160"

#: ../../deploy.rst:129 2bd9c115b4b24a0b8b9e8f776e3ba1c7
msgid "Sha1"
msgstr "Sha1"

#: ../../deploy.rst:130 b3804cf6634640a0a74d23681a413a71
msgid "Sha256"
msgstr "Sha256"

#: ../../deploy.rst:131 b163d3a0e7594a69b790ac6329b0307b
msgid "SigHashType"
msgstr "SigHashType"

#: ../../deploy.rst:132 f741d80f2fa245bf964d75861abf5eea
msgid "SigHashPreimage"
msgstr "SigHashPreimage"

#: ../../deploy.rst:133 a37189cad377469b8dff9d02d9086b60
msgid "OpCodeType"
msgstr "OpCodeType"

#: ../../deploy.rst:134 6ca810fa80bd41538d0064dae972845d
msgid "数组"
msgstr "Array"

#: ../../deploy.rst:134 8ba1b15a4b8145b08b407bc8a4216c1d
msgid "每个元素分别填写"
msgstr "Fill in each element separately"

#: ../../deploy.rst:135 2420b5498b40423b8f9426077c200288
msgid "结构体"
msgstr "Structure"

#: ../../deploy.rst:135 8d3eda2eba9a44278aa90c044f0f2d90
msgid "每个成员分别填写"
msgstr "Fill in each struct field separately"

#: ../../deploy.rst:141 132c541bfcb74d9fa3989fc016aa4c55
msgid "其它功能"
msgstr "Other Features"

#: ../../deploy.rst:146 f0ea29fcb35a49a896d3a560714dcf01
msgid "查看交易"
msgstr "View Transaction"

#: ../../deploy.rst:148 16e6954dbd074ee5bb82f3f63e90272c
msgid "合约实例窗口下 **transactions** 子项带有 **View Tx** 按钮， 点击可打开区块链浏览器查看该交易详情。"
msgstr ""
"The **transactions** sub-item under the contract instance window has a "
"**View Tx** button. Click it to open a block explorer to view the "
"transaction details."

#: ../../deploy.rst:155 095ced9760294a3292b3676bac0713a4
msgid "复制值"
msgstr "Copy Value"

#: ../../deploy.rst:157 71265d1f43eb4cbd9b88419a384c79b7
msgid "在合约实例窗口下选中某个函数，在参数列表上单击右键，会出现 **Copy Value** 菜单， 点击该菜单可以将参数的值复制到剪切板。"
msgstr ""
"Select a function in the contract instance window, right-click on the "
"parameter list, and the **Copy Value** menu will appear. Click this menu to "
"copy the value of the parameter to the clipboard."

#: ../../deploy.rst:164 8b130cb393074f67a955e5cfa03111d0
msgid "清除所有合约实例"
msgstr "Clear All Contract Instances"

#: ../../deploy.rst:166 5d8dd16c9b0f40dfa7e79c8ef1c19bc8
msgid "点击该按钮删除所有合约实例。"
msgstr "Click this button to delete all contract instances."

#: ../../deploy.rst:173 b44923319221468b8ed9af74dadc2c29
msgid "删除单个合约实例"
msgstr "Delete a Single Contract Instance"

#: ../../deploy.rst:175 bd45134f66d94457bbf7fc77812615a3
msgid "在合约实例上右键单击会出现 **Delete** 菜单， 点击该菜单可以删除该合约实例。"
msgstr ""
"Right-click on the contract instance and the **Delete** menu will appear. "
"Click this menu to delete the contract instance."
