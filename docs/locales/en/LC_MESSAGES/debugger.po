# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sCrypt.Inc
# This file is distributed under the same license as the sCrypt-IDE-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt-IDE-docs 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-05 18:09+0800\n"
"PO-Revision-Date: 2021-06-02 09:22+0000\n"
"Last-Translator: qtom zheng <zhfnjust@gmail.com>, 2021\n"
"Language-Team: English (https://www.transifex.com/scrypt-1/teams/121283/en/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../debugger.rst:5 536000d91ac74948b4c9d1223dc9cb99
msgid "调试器"
msgstr "Debugger"

#: ../../debugger.rst:7 214dd40d1de1451681cb8ce31c1b0bdd
msgid ""
"**IDE** 自带一个功能强大的调试器。可以用它来调试 **.scrypt** 源代码。如果购买了高级付费功能，还可以用它来进行脚本级别的调试。 "
"并非所有合约都可以编写完成后就会按照预期行事，当它发生错误时，可能需要盯着代码看好几个小时，一个好调试器可以让你更轻松且更高效地解决问题。 "
"当调试合约时，调试器提供许多方法让你查看代码的情况，比如逐步执行代码、查看变量中存储的值、查看函数的调用栈、查看比特币双堆栈中的数据、代码的执行路径等。"
msgstr ""
"**IDE** comes with a powerful debugger. You can use it to debug **.scrypt** "
"source code. If you have purchased advanced paid features, you can also use "
"it for script-level debugging. Not all contracts can be written and behave "
"as expected. When an error occurs, you may need to stare at the code for "
"several hours. A good debugger can make it easier and more efficient for you"
" to solve the problem. When debugging a contract, the debugger provides many"
" methods for you to view the status of the code, such as step-by-step "
"execution of the code, view the value stored in the variable, view the call "
"stack of the function, view the data in the Bitcoin dual stack, and the "
"execution path of the code."

#: ../../debugger.rst:14 61d0c025c82a433b9e41522837a95aa7
msgid "配置启动参数"
msgstr "Configure Startup Parameters"

#: ../../debugger.rst:16 2de9672716ef4e7484b715e02b9c46e5
msgid ""
"与一般语言（比如c++/javascript)不同， 启动 **IDE** 的 debugger 必须配置启动参数。这是 **sCrypt** "
"语言的结构特性决定的，如下图： 我们知道比特币脚本的执行是将解锁脚本和锁定脚本连接起来形成完整的脚本后再执行， 其中解锁脚本在前，锁定脚本在后。 "
"**sCrypt** 合约含有一个或者多个 *public* 函数， 启动调试器就是运行合约的某一个 *public* 函数，函数的参数对应解锁脚本， "
"函数的内容对应锁定脚本。 运行这个函数，需要按照这个函数的签名来正确的配置调用函数的参数，也就是解锁脚本。"
msgstr ""
"Unlike general languages (such as c++/javascript), the debugger that starts "
"**IDE** must be configured with startup parameters. This is determined by "
"the structural characteristics of the **sCrypt** language, as shown in the "
"figure below: We know that the execution of the Bitcoin script is to connect"
" the unlocking script and the locking script to form a complete script "
"before execution, where the unlocking script is first, and the locking "
"script is Rear. The **sCrypt** contract contains one or more *public* "
"functions. Starting the debugger is to run a certain *public* function of "
"the contract. The parameters of the function correspond to the unlocking "
"script, and the content of the function corresponds to the locking script. "
"To run this function, you need to correctly configure the parameters of the "
"calling function according to the signature of this function, that is, the "
"unlocking script."

#: ../../debugger.rst:25 102c4a05f39c4a28a98240d8682058f5
msgid "创建launch.json"
msgstr "Create launch.json"

#: ../../debugger.rst:26 03835c21fed84fba85f84e8d2c7ab85d
msgid "打开调试视图，如果当前工作区没有创建 **launch.json** ，会提示你创建 **launch.json** 文件。"
msgstr ""
"Open the debug view. If the **launch.json** is not created in the current "
"workspace, you will be prompted to create the **launch.json** file."

#: ../../debugger.rst:33 01653193555e4f548521992be720ef87
msgid "下面是一个调试 `p2pkh`_ 合约的示例配置："
msgstr ""
"The following is an example configuration for debugging the `p2pkh`_ "
"contract:"

#: ../../debugger.rst:59 8f774fcc95b94c2081f0a4eedaaa29c6
msgid "配置项说明"
msgstr "Configuration Item Description"

#: ../../debugger.rst:62 c5147b5fd9a24adbb4fc9f7ae12d2657
msgid "配置项"
msgstr "Configuration Item"

#: ../../debugger.rst:62 ../../debugger.rst:111
#: 005c6755a77c4d7998635e72c018975a 9b5f3c9f6b9d428b83e61b0b5c424ed9
msgid "必须"
msgstr "have to"

#: ../../debugger.rst:62 ../../debugger.rst:111
#: bddcb043378d4ae3ab51827974f2ed50 8b80866db3594bd1acb3b2220ddd9631
msgid "说明"
msgstr "Description"

#: ../../debugger.rst:64 0860a5eb565844309da3ea9ad21b625a
msgid "type"
msgstr "type"

#: ../../debugger.rst:64 ../../debugger.rst:65 ../../debugger.rst:66
#: ../../debugger.rst:67 ../../debugger.rst:68 ../../debugger.rst:69
#: ../../debugger.rst:70 ../../debugger.rst:113 ../../debugger.rst:114
#: ../../debugger.rst:115 12e460f0564e45caa0fe17e078e24382
#: 3a69f63ee5794e20a9de52f5db54365e 17bef8fdc8e84053b542e8a8174806c1
#: a48c85d7807247e1b7f9cfa84c260fd2 9f63e765c1a6430592df317069016914
#: 88717910b34e4884882c2ef70bbf98a8 47c8863db2ce4279b5fe9b15fee3cb12
#: 5b741c14392d41a494b67906d0212c2f 1527a28540b54059b457824d95ff5b37
#: 8398f09e57c44e2882d85a7b4700d050
msgid "是"
msgstr "Yes"

#: ../../debugger.rst:64 7c7f51159e4540949f54aaa7ce553bcd
msgid "配置类型，固定为 ``scrypt``"
msgstr "Configuration type, fixed as ``scrypt``"

#: ../../debugger.rst:65 96186e7a670f48018a988f4a5f479837
msgid "request"
msgstr "request"

#: ../../debugger.rst:65 ed87b3a99f4e4d38ac6721f096bf4469
msgid "调试器启动类型，只支持 ``launch`` 模式"
msgstr "Debugger startup type, only supports ``launch`` mode"

#: ../../debugger.rst:66 6a001d7504c04b0595e6121cb667eeb7
msgid "name"
msgstr "name"

#: ../../debugger.rst:66 8f8e7156650e472bb5d35eecbafdb10a
msgid "配置名称"
msgstr "Configuration name"

#: ../../debugger.rst:67 6036b014632343efa2e50c3131739e43
msgid "program"
msgstr "program"

#: ../../debugger.rst:67 20db4c44fa644c9bbb05c17130ff2e79
msgid "要调试的源代码文件，可以使用VS Code的工作区代号 ``${workspaceFolder}``，也可以使用绝对路径"
msgstr ""
"To debug the source code file, you can use the VS Code workspace code "
"``${workspaceFolder}``, or you can use the absolute path"

#: ../../debugger.rst:68 f8164bea38b6436fb5d11a4ce72383e4
msgid "constructorArgs"
msgstr "constructorArgs"

#: ../../debugger.rst:68 a4d55d9937004e6aa2bd50e8009e31eb
msgid "合约的构造参数"
msgstr "Contract construction parameters"

#: ../../debugger.rst:69 cff80d27d4814a3f86bdcb89856cb845
msgid "pubFunc"
msgstr "pubFunc"

#: ../../debugger.rst:69 0b056caa6eff476aaf3ccc00b2f3e1bf
msgid "要调试的 *public* 函数名称"
msgstr "*public* function name to be debugged"

#: ../../debugger.rst:70 5ba1b7434c4343f3aa220ea70e8e7267
msgid "pubFuncArgs"
msgstr "pubFuncArgs"

#: ../../debugger.rst:70 d3eef28366614246b549097353e6e269
msgid "要调试的 *public* 函数的参数"
msgstr "The parameters of the *public* function to be debugged"

#: ../../debugger.rst:71 d6abd1cc21f44822aa64cd742c8cec0f
msgid "txContext"
msgstr "txContext"

#: ../../debugger.rst:71 ../../debugger.rst:72 ../../debugger.rst:116
#: ce241b3fb9924561a41029cfd5cb3ace 0794a52a6db94d54ad7ba806cc06b30a
#: ba69a06e0de046f6a88c4e4896810e0a
msgid "否"
msgstr "No"

#: ../../debugger.rst:71 6550ec062503425db596381a803fe229
msgid "运行函数所需的 :ref:`交易上下文 <txContext>`"
msgstr "Required to run the function :ref:`Transaction Context <txContext>`"

#: ../../debugger.rst:72 7ba131ba769142b89777b558dddcaa01
msgid "asmArgs"
msgstr "asmArgs"

#: ../../debugger.rst:72 0a4ca30bb15b41b6bfc06fd2be790380
msgid "`汇编变量`_"
msgstr "`Assembly Variable`_"

#: ../../debugger.rst:78 ac43ad812d2c40fba24b37811f0c1ac1
msgid "参数输入格式"
msgstr "Parameter input format"

#: ../../debugger.rst:81 806b0199d35243d9af98366f5d2bd04f
msgid "参数类型"
msgstr "Parameter Type"

#: ../../debugger.rst:81 1cad26b0b58c498e839fc615824f0569
msgid "输入格式说明"
msgstr "Input Format Description"

#: ../../debugger.rst:83 60073db86fb14ec1a833c54e0e59329e
msgid "bool"
msgstr "bool"

#: ../../debugger.rst:83 4d2f5060f967441dbd7ecc2a64594c2c
msgid "``true`` 或者 ``false``"
msgstr "``true`` or ``false``"

#: ../../debugger.rst:84 2de05d33f5f442c7ba756f86fd9dcad8
msgid "int"
msgstr "int"

#: ../../debugger.rst:84 aba96b473c684ae1a1403a395b115ef3
msgid ""
"数字或字符串，如果值小于 ``9007199254740991`` (2^53 − 1)， 可以直接使用数字表示，也可以使用字符串表示（包括十进制 "
"字符串和 ``0x`` 开头的十六进制字符串），如果值大于等于 ``9007199254740991``，应该使用字符串表示"
msgstr ""
"Number or string, if the value is less than ``9007199254740991`` (2^53 − 1),"
" it can be represented by numbers directly or by string (including decimal "
"string and hexadecimal starting with ``0x`` String), if the value is greater"
" than or equal to ``9007199254740991``, it should be represented by a string"

#: ../../debugger.rst:86 899c976623f948cdaf99fbd3380c764b
msgid "bytes"
msgstr "bytes"

#: ../../debugger.rst:86 713bc8e2d32941fa9f9d6f28126120c4
msgid "字符串, 例如: ``\"b'0011'\"``"
msgstr "String, for example: ``\"b'0011'\"``"

#: ../../debugger.rst:87 014506c1f9f3483789b4e56dd3add20b
msgid "PubKey"
msgstr "PubKey"

#: ../../debugger.rst:87 e03ab516c07a45dcbd60ed77c979e9c7
msgid ""
"字符串, 例如: "
"``\"PubKey(b'036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f')\"``，括号中间是"
" *bytes*"
msgstr ""
"String, for example: "
"``\"PubKey(b'036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f')\"``,"
" the middle of the bracket is *bytes*"

#: ../../debugger.rst:89 025a117b151541939687c82ee184f385
msgid "PrivKey"
msgstr "PrivKey"

#: ../../debugger.rst:89 9f60f2c2882346a5b00a6c1883c1432a
msgid ""
"字符串, 例如: ``\"PrivKey(1000000000000)\"`` or ``\"PrivKey(0x036cfa9a)\"``, "
"括号中间是十进制或十六进制数字"
msgstr ""
"String, for example: ``\"PrivKey(1000000000000)\"`` or "
"``\"PrivKey(0x036cfa9a)\"``, with decimal or hexadecimal numbers in the "
"middle of the brackets"

#: ../../debugger.rst:90 71331e885d9f435bac7175b72a072675
msgid "Sig"
msgstr "Sig"

#: ../../debugger.rst:90 fe522b13107545bc99aaf88c078a5fa7
msgid ""
"字符串, 例如: "
"``\"Sig(b'036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f')\"``，括号中间是"
" *bytes*"
msgstr ""
"String, for example: "
"``\"Sig(b'036cfa9a0b0abf4fa56e583b99f8d1ba4a2608096283cdea68ecf1d4f5bdefeb1f')``"
" , with *bytes* in the middle of the brackets"

#: ../../debugger.rst:91 e1324ce6c204439db5d9afaf79cb945e
msgid "Ripemd160"
msgstr "Ripemd160"

#: ../../debugger.rst:91 b2f5b8fe05044b4ca55260d5a0cf33d5
msgid ""
"字符串, 例如: "
"``\"Ripemd160(b'ba53f598a150a242b21bcb6963a2db6dae6fa896')\"``，括号中间是 *bytes*"
msgstr ""
"String, for example: "
"``\"Ripemd160(b'ba53f598a150a242b21bcb6963a2db6dae6fa896')\"``, the middle "
"of the bracket is *bytes*"

#: ../../debugger.rst:92 9d05a8bae5854182b73c822abba10b09
msgid "Sha1"
msgstr "Sha1"

#: ../../debugger.rst:92 261799c69e5c4bf8a9fa227c8acec7bd
msgid ""
"字符串, 例如: ``\"Sha1(b'3e5b01787918c4e39f99ee70d7db11dddb1cc98d')\"``，括号中间是 "
"*bytes*"
msgstr ""
"String, for example: "
"``\"Sha1(b'3e5b01787918c4e39f99ee70d7db11dddb1cc98d')\"``, in the middle of "
"the bracket is *bytes*"

#: ../../debugger.rst:93 8ce97001238148d99066cbcb561ccfc3
msgid "Sha256"
msgstr "Sha256"

#: ../../debugger.rst:93 64a58bf32c5346bfbfd62695367d6c48
msgid ""
"字符串, 例如: "
"``\"Sha256(b'5a3d057ba410db21e6e92788779e6262a83d0a305762d5ece77dc801c6242f70')\"``，括号中间是"
" *bytes*"
msgstr ""
"String, for example: "
"``\"Sha256(b'5a3d057ba410db21e6e92788779e6262a83d0a305762d5ece77dc801c6242f70')\"``,"
" in the middle of the bracket is *bytes*"

#: ../../debugger.rst:94 42818f4309c54549aa0bd1b74f4b7f09
msgid "SigHashType"
msgstr "SigHashType"

#: ../../debugger.rst:94 b05814bca34d4503ae54dcf81ad9c0cc
msgid "字符串, 例如: ``\"SigHashType(b'4c')\"``，括号中间是 *bytes*"
msgstr ""
"String, for example: ``\"SigHashType(b'4c')\"``, *bytes* in the middle of "
"the brackets"

#: ../../debugger.rst:95 3373270e0609455fb77181e783b03ac9
msgid "SigHashPreimage"
msgstr "SigHashPreimage"

#: ../../debugger.rst:95 ec42064d12b84d499ae7e94b03f9adb8
msgid ""
"字符串, 例如: "
"``\"SigHashPreimage(b'0100000028bcef7e73248aa273db19d73f65730862b2491c8e0eeb767f7fbd78c4...')\"``，括号中间是"
" *bytes*"
msgstr ""
"String, for example: "
"``\"SigHashPreimage(b'0100000028bcef7e73248aa273db19d73f65730862b2491c8e0eeb767f7fbd78c4...')\"``,"
" the middle of the bracket is *bytes*"

#: ../../debugger.rst:96 3b544b66e7dc40a6ab682690be58c5f6
msgid "OpCodeType"
msgstr "OpCodeType"

#: ../../debugger.rst:96 4b29d017e9214c849a58bab6a2e8a672
msgid "字符串, 例如: ``\"OpCodeType(b'81')\"`` 表示 OP_1， 更多 `Opcodes`_ ，括号中间是 *bytes*"
msgstr ""
"String, for example: ``\"OpCodeType(b'81')\"`` means OP_1, more `Opcodes`_, "
"*bytes* in the middle of the brackets"

#: ../../debugger.rst:99 91fe3a6b1eae4b97b06a5c1290142535
msgid "数组"
msgstr "Array"

#: ../../debugger.rst:99 8f45ecdb1b5841258f96cfe3a5697cb9
msgid "同 *JSON* 的数组，所有元素必须是以上基本类型或者是结构体、数组"
msgstr ""
"Same as *JSON* array, all elements must be of the above basic types or "
"structures or arrays"

#: ../../debugger.rst:100 c22e1e511ef3458dbe83275ca2a2fa5c
msgid "结构体"
msgstr "Structure"

#: ../../debugger.rst:100 5325fece97dd4d0ea57584051d418a2c
msgid "同 *JSON* 的对象，所有成员必须是以上基本类型或者是结构体、数组"
msgstr ""
"Same as *JSON* objects, all members must be of the above basic types or "
"structures or arrays"

#: ../../debugger.rst:106 2ad2651350494f5ea5d6d0028b2b8d84
msgid "交易上下文"
msgstr "Transaction Context"

#: ../../debugger.rst:108 654783c0e1244ee6a86ac19a10219e21
msgid ""
"交易上下文，即 **txContext** "
"参数，指定调试时当前交易的相关上下文信息，仅当在合约内进行签名或者原象校验时才需要。缺少会导致调试器无法进行校验。"
msgstr ""
"The transaction context, the **txContext** parameter, specifies the relevant"
" context information of the current transaction during debugging. It is only"
" needed when signing or verifying the original image in the contract. "
"Missing will cause the debugger to fail to verify."

#: ../../debugger.rst:111 02288f71b41d48559b3d14c607ab9cf0
msgid "字段"
msgstr "Field"

#: ../../debugger.rst:113 d93ca79bf0634685a7d2d8e48e3ac7d4
msgid "hex"
msgstr "hex"

#: ../../debugger.rst:113 beb499110d8142dd8225dbb55c0b1f38
msgid "序列化的当前交易，即解锁脚本所在交易。可以是签名过的，也可以是未签名的"
msgstr ""
"The serialized current transaction, that is, the transaction where the "
"unlock script is located. It can be signed or unsigned"

#: ../../debugger.rst:114 76cedd4724714b5eb3cec6201f2819f1
msgid "inputIndex"
msgstr "inputIndex"

#: ../../debugger.rst:114 15c4a9a4403d4897b865dd2889a3384b
msgid "要花费的、被合约锁定的 UTXO 所对应的 input 索引"
msgstr ""
"The input index corresponding to the UTXO to be spent and locked by the "
"contract"

#: ../../debugger.rst:115 955135f6f9574a8196a1a2f0f0dcdc86
msgid "inputSatoshis"
msgstr "inputSatoshis"

#: ../../debugger.rst:115 49b0af3b87994198b5882c7eff94147f
msgid "要花费的、被合约锁定的 UTXO 中比特币数量，单位 *satoshis*"
msgstr ""
"The amount of Bitcoin in UTXO to be spent and locked by the contract, in "
"*satoshis*"

#: ../../debugger.rst:116 01b93867f5234f9c8509e866751566ae
msgid "opReturn"
msgstr "opReturn"

#: ../../debugger.rst:116 e7c4f9cd804d41e1bd84ff3a3c49ebb3
msgid "带状态合约的状态，从OP_RETURN开始，不包含OP_RETURN"
msgstr ""
"The state of the stateful contract, starting from OP_RETURN, excluding "
"OP_RETURN"

#: ../../debugger.rst:121 653ea32bb9f14652ba158adac768ad1f
msgid "了解校验签名是如何运作的: `CHECKSIG`_"
msgstr "Understand how the verification signature works: `CHECKSIG`_"

#: ../../debugger.rst:126 5642c01fc8cc41699205bc8c18c06020
msgid "设置断点并启动"
msgstr "Set a Breakpoint and Start"

#: ../../debugger.rst:129 e4a69e17cc6b4224ae7c23b20a8815ec
msgid ""
"在启动调试器之前，首先设置断点。断点是可靠调试的最基本和最重要的功能，若代码编辑器中打开了文件，则可通过单击代码行左侧的边缘来设置断点，或者按 "
"**F9**。 接下来按 **F5** 或者 点击 **运行和调式** 侧边栏面板中的“开始调试”按钮，调试器将运行至它遇到的第一个断点。"
msgstr ""
"Before starting the debugger, first set a breakpoint. Breakpoint is the most"
" basic and important function for reliable debugging. If the file is opened "
"in the code editor, you can set the breakpoint by clicking the left edge of "
"the code line, or press **F9**. Then press **F5** or click the \"Start "
"Debugging\" button in the **Run and Debug** sidebar panel, and the debugger "
"will run to the first breakpoint it encounters."

#: ../../debugger.rst:136 4e9285c83e434d4d895eebf35ac7e3d3
msgid "单步执行"
msgstr "Step Over"

#: ../../debugger.rst:138 4ad29e5af80f43949dd9c6335d96377e
msgid "调试器遇到断点后，就进入中断模式，脚本执行被挂起，而函数、变量和合约实例保留在栈中，接下来："
msgstr ""
"After the debugger encounters a breakpoint, it enters the break mode, the "
"script execution is suspended, and the functions, variables, and contract "
"instances remain on the stack. Next:"

#: ../../debugger.rst:140 499311ec56a84b809917d81be706effe
msgid "通过按 **F10** 或 **F11** 开始单步执行代码"
msgstr "Start stepping through the code by pressing **F10** or **F11**"

#: ../../debugger.rst:142 aea3c959592742b09c694925347d2f7a
msgid "通过打开右键菜单，选择 **运行到光标** 菜单"
msgstr "Open the right-click menu and select **Run to Cursor** menu"

#: ../../debugger.rst:144 a0140e530222475daa2c2bb50c1b1009
msgid "通过按 **F5** 执行到下一个断点"
msgstr "Execute to the next breakpoint by pressing **F5**"

#: ../../debugger.rst:146 5510d4f2422743f3b3473fa22084ccc6
msgid "通过按 **Shit + F11** 停止单步执行， 跳出当前函数"
msgstr ""
"By pressing **Shit + F11** to stop single step execution, jump out of the "
"current function"

#: ../../debugger.rst:148 62c08dc3f4c2406093a2f14d3d5e647e
msgid ""
"在通过上述操作浏览代码时，左侧调试视图的中的 **变量面板** 和 **调用堆栈面板** 中的数据会实时地变化，如果在 **监视面板** "
"添加了表达式或者变量，将会实时地变化。"
msgstr ""
"When browsing the code through the above operations, the data in the "
"**variable panel** and the **call stack panel** in the debugging view on the"
" left will change in real time. If an expression is added to the **watch "
"panel** or Variables will change in real time."

#: ../../debugger.rst:153 21b2631cffe24cfeb348652dc98477a8
msgid "一次调试只能以一个 *public* 函数为入口。"
msgstr ""
"Only one *public* function can be used as the entry point for debugging at a"
" time."

#: ../../debugger.rst:156 8e60a88760df4de7b30cb58d65003b9e
msgid "调试操作"
msgstr "Debug Actions"

#: ../../debugger.rst:158 59be4c5169a746fd9d154ebee4c1aaf7
msgid "调试会话开始后，调试工具栏将出现在代码编辑器的顶部。"
msgstr ""
"After the debugging session starts, the debugging toolbar will appear at the"
" top of the code editor."

#: ../../debugger.rst:164 325c3ea157684d448fbd4f77c751266b
msgid "继续/暂停 **F5**"
msgstr "Continue/Pause **F5**"

#: ../../debugger.rst:165 2f13c7b477ef4368a5fa22690ced5216
msgid "单步跨过 **F10**"
msgstr "Step Over **F10**"

#: ../../debugger.rst:166 42852db642a54e90b90d211ad1b9736b
msgid "单步跳入 **F11**"
msgstr "Step Into **F11**"

#: ../../debugger.rst:167 79c1179db2bd4f038d6a0bfe5714b02b
msgid "单步跳出 **Shift+F11**"
msgstr "Step Out **Shift+F11**"

#: ../../debugger.rst:168 9fabe3e0a2f14fdaa571452e6e401109
msgid "重启调试器 **Ctrl+Shift+F5**"
msgstr "Restart  **Ctrl+Shift+F5**"

#: ../../debugger.rst:169 5e69d74f1e4e4d24814f5a14f36ddda5
msgid "停止 **Shift+F5**"
msgstr "Stop **Shift+F5**"

#: ../../debugger.rst:173 1140be03b49c4fffb0bc719a513129a5
msgid "变量"
msgstr "Variable"

#: ../../debugger.rst:175 6ef56ee26dea486db08fdad9c1d1d255
msgid ""
"**变量面板** 主要显示两个域的变量： 当前函数和静态变量。 ``this`` 表示当前合约， 单击可展开查看合约的所有属性。 ``Statics``"
" 下则显示所有的静态变量。"
msgstr ""
"**Variable Panel** Mainly displays variables in two domains: current "
"function and static variable. ``this`` represents the current contract, "
"click to expand to view all the properties of the contract. Under "
"``Statics``, all static variables are displayed."

#: ../../debugger.rst:183 60351ea92d4145c0a3ede6faa11f8383
msgid "复制值"
msgstr "Copy Value"

#: ../../debugger.rst:185 2eed41a71d2141c09fec585134bcc6d3
msgid "在某个变量上右键单击，会出现 **复制值** 菜单，可以直接复制变量的值到剪切板中。"
msgstr ""
"Right-click on a variable, the **Copy Value** menu will appear, and you can "
"directly copy the value of the variable to the clipboard."

#: ../../debugger.rst:192 f70a5ddc207549b7a3326aa0f732cd73
msgid "没有被引用到的静态变量不会出现在最后的脚本编译输出里，也不会在面板中显示。"
msgstr ""
"Static variables that are not referenced will not appear in the final script"
" compilation output, nor will they be displayed in the panel."

#: ../../debugger.rst:196 78294d74a7bb4f55ab254001aeff3bf8
msgid "监视"
msgstr "Watch"

#: ../../debugger.rst:198 cc5d6c2047114681b62cbc030669f3e1
msgid "可以在 **监视面板** 中添加变量和表达式。"
msgstr "You can add variables and expressions in the **Monitor Panel**."

#: ../../debugger.rst:204 36eb4c1c959c4931ba6f1226cad8089e
msgid "调用堆栈"
msgstr "Call Stack"

#: ../../debugger.rst:206 d4452a132e034d6dae6a8e1640b2a999
msgid ""
"使用“调用堆栈”面板可以查看当前被调用的所有函数。 “调用堆栈”窗口显示函数被调用的顺序。栈底是当前调试的 *public* 函数。 "
"单击“调用堆栈”上的函数名，代码编辑器会自动跳转到函数定义的位置。"
msgstr ""
"Use the \"Call Stack\" panel to view all functions currently being called. "
"The \"Call Stack\" window shows the order in which the functions are called."
" The bottom of the stack is the *public* function currently being debugged. "
"Click the function name on the \"Call stack\" and the code editor will "
"automatically jump to the location of the function definition."

#: ../../debugger.rst:215 4a7f20ae77664f4c820da22ac9c7b6eb
msgid "调试控制台 (REPL)"
msgstr "Debug Console (REPL)"

#: ../../debugger.rst:224 4082e00de1364eea97a411d45a4e6549
msgid "异常"
msgstr "Exceptions"
